version: '3.8'

services:
  # Nginx 反向代理服务
  nginx:
    image: nginx:alpine
    container_name: micoblog-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # Nginx 配置文件
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      # 静态文件（如果需要 Nginx 直接服务）
      - ../blogs.html:/usr/share/nginx/html/index.html
      - ../images:/usr/share/nginx/html/images
      - ../fonts:/usr/share/nginx/html/fonts
      # 日志目录
      - ./nginx/logs:/var/log/nginx
      # IP 封禁配置文件
      - ./nginx/blocked_ips.conf:/etc/nginx/blocked_ips.conf
    depends_on:
      - micoblog-backend
    networks:
      - micoblog-network

  # MicoBlog 后端服务
  micoblog-backend:
    build: 
      context: ..
      dockerfile: docker-deploy/Dockerfile
    container_name: micoblog-backend
    # 不暴露端口到宿主机，只在内部网络访问
    expose:
      - "3001"
    volumes:
      # 数据持久化
      - ./data:/app/backend/data
      - ./uploads:/app/backend/uploads
      # Nginx 配置访问（用于 IP 封禁功能）
      - ./nginx/logs:/nginx/logs
      - ./nginx/blocked_ips.conf:/nginx/conf/blocked_ips.conf
    environment:
      - NODE_ENV=production
      - PORT=3001
      - DB_FILE=/app/backend/data/database.db
      # Linux 环境下的 Nginx 配置
      - NGINX_ERROR_LOG_PATH=/nginx/logs/error.log
      - NGINX_BLOCK_IP_FILE=/nginx/conf/blocked_ips.conf
      - NGINX_EXE_PATH=/usr/sbin/nginx
      - NGINX_CWD=/nginx/conf
      # 安全配置
      - JWT_SECRET=your-secure-jwt-secret-here
      - AI_REPORTS_API_KEY=your-ai-reports-api-key-here
    restart: unless-stopped
    networks:
      - micoblog-network

networks:
  micoblog-network:
    driver: bridge
